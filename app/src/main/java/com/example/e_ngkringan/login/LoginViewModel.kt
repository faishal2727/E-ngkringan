package com.example.e_ngkringan.loginimport androidx.lifecycle.*import com.example.e_ngkringan.api.ApiConfigimport com.example.e_ngkringan.data_store.UserLoginPreferencesimport com.example.e_ngkringan.model.AngkringanDetailimport com.example.e_ngkringan.model.UserRegisterimport com.example.e_ngkringan.model.UsersLoginimport com.example.e_ngkringan.model.UsersPersonimport kotlinx.coroutines.launchimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass LoginViewModel(private val userPreferences: UserLoginPreferences) : ViewModel() {    private val _userLogin = MutableLiveData<UsersLogin>()    private val signUp: MutableLiveData<UserRegister?> = MutableLiveData()    val usersLogin: LiveData<UsersLogin> = _userLogin    fun setToken(token: String) {        viewModelScope.launch {            userPreferences.setToekn(token)        }    }    fun deleteToken() {        viewModelScope.launch {            userPreferences.deleteToken()        }    }    fun getToken(): LiveData<String> = userPreferences.getTekon().asLiveData()    fun signUpObserver(): MutableLiveData<UserRegister?> = signUp    private val _isLoading = MutableLiveData<Boolean>()    val isLoading: LiveData<Boolean> = _isLoading    fun login(email: String, password: String) {        _isLoading.value = true        ApiConfig.getApiService().login(UsersPerson(email, password))            .enqueue(object : Callback<UsersLogin> {                override fun onResponse(call: Call<UsersLogin>, response: Response<UsersLogin>) {                    _isLoading.value = false                    if (response.isSuccessful) {                        _userLogin.postValue(response.body())                    }                }                override fun onFailure(call: Call<UsersLogin>, t: Throwable) {                    _isLoading.value = false                }            })    }    fun doSignUp(name: String, email: String, password: String) {        _isLoading.value = true        ApiConfig.getApiService().register(name, email, password)            .enqueue(object : Callback<UserRegister> {                override fun onResponse(                    call: Call<UserRegister>,                    response: Response<UserRegister>                ) {                    _isLoading.value = false                    if (response.isSuccessful) {                        signUp.postValue(response.body())                    }                }                override fun onFailure(call: Call<UserRegister>, t: Throwable) {                    _isLoading.value = false                }            })    }}